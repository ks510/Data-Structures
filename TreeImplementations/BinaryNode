/**
* Tree node for a binary list tree
* @author Karen Suen
* @version April 2017
**/

public class TreeNode {
    private Object data;
    private TreeNode leftChild;
    private TreeNode rightChild;
    private TreeNode parent;

    /**
     * Construct a new node with the given data.
     * @param Object data
     */
    public TreeNode(Object data) {
        this.data = data;
        this.leftChild = null;
        this.rightChild = null;
        this.parent = null;
    }

    /**
     * Set the left child pointer to the specified node
     * @param node left child of current node
     */
    public void setLeft(TreeNode node) {
        leftChild = node;
    }
    
    /**
     * Set the right child pointer to the specified node
     * @param node right child of current node
     */
    public void setRight(TreeNode node) {
        rightChild = node;
    }
    
    /**
     * Set the parent node to the specified node
     * @param node parent
     */
    public void setParent(TreeNode node) {
        parent = node;
    }

    /**
     * Get the left child node of the current node
     * @return left child node
     */
    public TreeNode getLeft() {
        return leftChild;
    }
    
    /**
     * Get the left child node of the current node
     * @return right child node
     */
    public TreeNode getRight() {
        return rightChild;
    }
    
    /**
     * Get the parent node of the current node
     * @return parent node
     */
    public TreeNode getParent() {
        return parent;
    }
    
    /**
     * Get the data element of the node
     * @return Object data
     */
    public Object getData() {
        return data;
    }
    
    /**
     * Replace the data in the current node with new data
     * @param data new data to replace current data with
     */
    public void setData(Object data) {
        this.data = data;
    }

}
