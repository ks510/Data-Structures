/**
 * dListNode implements a node for a doubly-linked list
 */
public class dListNode
{
    // A node stores data and a pointer to the previous and next node 
    private Object data;
    private dListNode next;
    private dListNode prev;

    /**
     * Construct a new node with the given data and pointers
     * @param Object data
     * @param dListNode next
     */
    dListNode(Object data, dListNode prev, dListNode next) {
        this.data = data;
        this.prev = prev;
        this.next = next;
    }

    /**
     * Set the next node to be the given node
     * @param dListNode node
     */
    public void setNext(dListNode node) {
        next = node;
    }

    /**
     * Get the next node
     * @return the next dListNode
     */
    public dListNode getNext() {
        return next;
    }
    
    /**
     * Set the previous node to the given node
     * @param node Previous node
     */
    public void setPrev(dListNode node) {
        prev = node;
    }
    
    /**
     * Get the previous node
     * @return the previous dListNode
     */
    public dListNode getPrev() {
        return prev;
    }
    
    /**
     * Get the data element of the node
     * @return Object data
     */
    public Object getData() {
        return data;
    }

}
