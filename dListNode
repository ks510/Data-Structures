/**
 * dListNode implements a node for a doubly-linked list
 * @author Panchama
 * @version March 2017
 */
public class dListNode
{
    //node stores data, previous pointer and next pointer
    private Object data;
    private dListNode next;
    private dListNode prev;

    /**
     * Construct a new node with the given data and pointers
     * @param Object data
     * @param dListNode next
     */
    public dListNode(Object data, dListNode prev, dListNode next) {
        this.data = data;
        this.prev = prev;
        this.next = next;
    }

    /**
     * Set the next pointer of the node to specified node
     * @param node Next node to set
     */
    public void setNext(dListNode node) {
        next = node;
    }

    /**
     * Get the next node
     * @return the next dListNode
     */
    public dListNode getNext() {
        return next;
    }
    
    /**
     * Set the previous pointer of the node to specified node
     * @param node Previous node to set
     */
    public void setPrev(dListNode node) {
        prev = node;
    }
    
    /**
     * Get the previous node
     * @return the previous dListNode
     */
    public dListNode getPrev() {
        return prev;
    }
    
    /**
     * Get the data element of the node
     * @return Object data element at node
     */
    public Object getData() {
        return data;
    }
    
    /**
     * Replace the data in the current node with new data
     * @param data element to put at the node
     */
    public void setData(Object data) {
        this.data = data;
    }

}
