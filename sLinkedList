import java.util.NoSuchElementException;
import java.lang.IndexOutOfBoundsException;
/**
 * LinkedList: a basic implementation of a singly linked list data structure. 
 * A linked list is a chain of ListNode objects. The head of the list is the 
 * first node of the chain (or null in the case of an empty list).
 * 
 * @author Karen Suen
 * @version March 2017
 */
public class LinkedList
{
    // a linked list has a head node and a size
    private ListNode head;
    private int size;

    /**
     * Construct a new empty list
     */
    public LinkedList() {
        head = null;
        size = 0;
    }

    /**
     * Add a new item as the first element
     * @param ListNode node
     */
    public void addFirst(ListNode node) {
        node.setNext(head);
        head = node;
        ++size;
    }

    /**
     * Remove the first list item
     */
    public void removeFirst() {
        // report error if list is empty
        if (head == null) {
            throw new NoSuchElementException();
        } else {
            ListNode temp = head;
            head = head.getNext();
            temp.setNext(null);
            size--;
        }
    }

    /**
     * Add new data to the front of the list by constructing a new node
     */

    public void add(Object item) {
        addFirst(new ListNode(item, null));
    }

    /**
     * Searches the list for the specified item and returns true if found, otherwise false
     * @return True if item is in list, false otherwise
     */
    public boolean contains(Object item) {
        boolean found = false;
        //check if list is empty
        if (size == 0) {
            return found;
        } else {
            ListNode compare = head;
            int i = 0;
            //iterate through list until data node has been found
            while(!found && i < size) {
                found = compare.getData().equals(item);
                compare = compare.getNext();
                i++;
            }
            return found;
        }
    }

    /**
     * Remove the nth element in the list
     * @param n position of node to remove from list
     */
    public void remove(int n) {
        if (size == 0 || n < 0 || n > size-1) {
            throw new IndexOutOfBoundsException();
        } else {
            ListNode header = new ListNode(null, head);
            ListNode before = header;

            for(int i = 0; i < size; i++) {
                before = before.getNext();
            }

            ListNode current = before.getNext();
            //checks if nth node was the last
            if (n == size) {
                before.setNext(null);
            } else {
                before.setNext(current.getNext());
            }
            current.setNext(null);
            size--;
            //checks if nth node was the first
            if(size == 0) {
                head = null;
            } else {
                head = header.getNext();
            }
        }
    }

    /**
     * Add a new item as a new ListNode to the nth position in the list
     * @param n position to add new element node
     * @param item new data element to add
     */
    public void addAt(int n, Object item) {
        if (n < 0 || n > size) {
            throw new IndexOutOfBoundsException();
        } else {
            ListNode header = new ListNode(null, head);
            ListNode prev = header;
            for(int i = 0; i < n; i++) {
                prev = prev.getNext();
            }
            //changes the pointer of previous and new item
            ListNode after = prev.getNext();
            prev.setNext(new ListNode(item, after));
            head = header.getNext();
            size++;
        }
    }

    /**
     * Returns a list of all the current items in reverse order
     * @return LinkedList of items in reverse order
     */
    public LinkedList reverse() {
        LinkedList reverseList = new LinkedList();
        //checks if list is empty
        if (size == 0) {
            return reverseList;
        } else {
            //start copying at head node
            ListNode copy = head;
            for(int i = 0; i < size; i++) {
                reverseList.add(copy.getData());
                copy = copy.getNext();
            }
        }
        return reverseList;
    }

}
