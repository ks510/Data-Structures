import java.util.NoSuchElementException;
/**
 * A stack structure implemented using a singly linked
 * list.
 * 
 * @author Karen Suen
 * @version March 2017
 */
public class listStack
{
    private ListNode topOfStack;
    private int size;

    /**
     * Constructor for objects of class listStack
     */
    public listStack()
    {
        topOfStack = null;
        size = 0;
    }

    /**
     * Adds the data to the top of the stack
     */
    public void push(Object e) {
        ListNode node = new ListNode(e, topOfStack);
        topOfStack = node;
        size++;
    }
    
    /**
     * @return Remove and return the data at the top of the stack
     */
    public Object pop() {
        if (size == 0) {
            throw new NoSuchElementException("Stack is empty");
        } else {
            ListNode temp = topOfStack;
            topOfStack = temp.getNext();
            temp.setNext(null);
            size--;
            
            return temp.getData();
        }
    }
    
    /**
     * @return Data at the head of the stack list (no removal)
     */
    public Object top() {
        if (size == 0) {
            throw new NoSuchElementException("Stack is empty");
        } else {
            return topOfStack.getData();
        }
    }
    
    /**
     * @return size of the stack list
     */
    public int size() {
        return size;
    }
    
    /**
     * @return true if stack is empty, false otherwise
     */
    public boolean isEmpty() {
        return size == 0;
    }
}
